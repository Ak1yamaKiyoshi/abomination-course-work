
0. ./api/README.md

```py
# python manage.py makemigrations
# python manage.py migrate
# python manage.py runserver
```

1. ./api/manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "course_work.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


2. ./api/course_work/asgi.py

"""
ASGI config for course_work project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "course_work.settings")

application = get_asgi_application()


3. ./api/course_work/wsgi.py

"""
WSGI config for course_work project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "course_work.settings")

application = get_wsgi_application()


4. ./api/course_work/urls.py

"""
URL configuration for course_work project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include


urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("course_work_app.urls"))
]


5. ./api/course_work/settings.py

from dotenv import load_dotenv
import os
load_dotenv()

"""
Django settings for course_work project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-g$$v4n#r!hmiv9ym%ef6*%_(ote5smi0=%97le!j6&a_ewc-dg"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "course_work_app",
    "rest_framework",
    "drf_yasg"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
#    'course_work_app.middleware.AuthorizationMiddleware',
]

ROOT_URLCONF = "course_work.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "course_work.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


authorization_key = os.getenv("AUTH_API_KEY")

6. ./api/course_work_app/apps.py

from django.apps import AppConfig


class CourseWorkAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "course_work_app"


7. ./api/course_work_app/urls.py

from django.urls import path, include, re_path
from rest_framework import permissions, routers
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from . import views

schema_view = get_schema_view(
    openapi.Info(
        title="CourseWorkApi",
        default_version='v1',
        description="Your API Description",
        terms_of_service="https://www.yoursite.com/policies/terms/",
        contact=openapi.Contact(email="contact@yoursite.local"),
        license=openapi.License(name="BSD License"),
    ),
    public=True,
    permission_classes=[permissions.AllowAny],
)


router = routers.DefaultRouter()
router.register('ankete', views.AnketeViewSet)
router.register('invitation-to-ankete', views.InvitationToAnketeViewSet)
router.register('invitation', views.InvitationViewSet)
router.register('open-info', views.OpenInfoViewSet)
router.register('closed-info', views.ClosedInfoViewSet)
router.register('password-restoration', views.PasswordRestorationViewSet)
router.register('keywords', views.KeywordsViewSet)
router.register('profile_pictures', views.ProfilePictureViewSet)

urlpatterns = [
    path('', include(router.urls)),
    path('login/', views.login_view, name='login'),
    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    re_path(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    re_path(r'^redoc/$', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]


8. ./api/course_work_app/serializers.py

from rest_framework import serializers
from .models import ProfilePicture, Ankete, InvitationToAnkete, Invitation, OpenInfo, ClosedInfo, PasswordRestoration, Keywords

class AnketeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Ankete
        fields = '__all__'

class ProfilePictureSerializer(serializers.ModelSerializer):
    class Meta:
        model = ProfilePicture
        fields = "__all__"

class InvitationToAnketeSerializer(serializers.ModelSerializer):
    class Meta:
        model = InvitationToAnkete
        fields = '__all__'

class InvitationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Invitation
        fields = '__all__'

class OpenInfoSerializer(serializers.ModelSerializer):
    class Meta:
        model = OpenInfo
        fields = '__all__'

class ClosedInfoSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClosedInfo
        fields = '__all__'

class PasswordRestorationSerializer(serializers.ModelSerializer):
    class Meta:
        model = PasswordRestoration
        fields = '__all__'

class KeywordsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Keywords
        fields = '__all__'


class LoginSerializer(serializers.Serializer):
    login = serializers.CharField(required=True)
    password = serializers.CharField(required=True)

9. ./api/course_work_app/views.py

from rest_framework import viewsets
from .models import ProfilePicture, Ankete, InvitationToAnkete, Invitation, OpenInfo, ClosedInfo, PasswordRestoration, Keywords
from .serializers import ProfilePictureSerializer, LoginSerializer, AnketeSerializer, InvitationToAnketeSerializer, InvitationSerializer, OpenInfoSerializer, ClosedInfoSerializer, PasswordRestorationSerializer, KeywordsSerializer
from .models import Ankete
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from drf_yasg.utils import swagger_auto_schema
from .serializers import LoginSerializer
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from drf_yasg import openapi
from drf_yasg.utils import swagger_auto_schema
from .serializers import LoginSerializer
from django.db.models import Q


class AnketeViewSet(viewsets.ModelViewSet):
    queryset = Ankete.objects.all()
    serializer_class = AnketeSerializer


@api_view(['POST'])
@permission_classes([AllowAny])  # Allow unauthenticated users to access this view
@swagger_auto_schema(
    request_body=LoginSerializer,
    operation_description="Authenticate user",
    responses={200: openapi.Response('Success'), 400: 'Invalid input', 401: 'Unauthorized'},
) # Provide schema information to Swagger
def login_view(request):
    """
    Authenticate a user and generate an authentication token.
    """
    serializer = LoginSerializer(data=request.data)

    if not serializer.is_valid():
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    login = serializer.validated_data['login']
    password = serializer.validated_data['password']

    try:
        ankete = Ankete.objects.get(login=login, password=password)
        return Response({'success': True,'ankete_id': ankete.ankete_id }, status=status.HTTP_200_OK)
    except Ankete.DoesNotExist:
        return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)


class ProfilePictureViewSet(viewsets.ModelViewSet):
    queryset = ProfilePicture.objects.all()
    serializer_class = ProfilePictureSerializer

class InvitationToAnketeViewSet(viewsets.ModelViewSet):
    queryset = InvitationToAnkete.objects.all()
    serializer_class = InvitationToAnketeSerializer

class InvitationViewSet(viewsets.ModelViewSet):
    queryset = Invitation.objects.all()
    serializer_class = InvitationSerializer
    
    
    def get_queryset(self):
        queryset = super().get_queryset()
        query_params = self.request.query_params.dict()

        query_filters = Q()

        for field in ['to_id']:
            value = query_params.get(field)
            if value and value != 'None':
                query_filters &= Q(**{f'{field}__iexact': value})

        return queryset.filter(query_filters)

class OpenInfoViewSet(viewsets.ModelViewSet):
    queryset = OpenInfo.objects.all()
    serializer_class = OpenInfoSerializer

class ClosedInfoViewSet(viewsets.ModelViewSet):
    queryset = ClosedInfo.objects.all()
    serializer_class = ClosedInfoSerializer

class PasswordRestorationViewSet(viewsets.ModelViewSet):
    queryset = PasswordRestoration.objects.all()
    serializer_class = PasswordRestorationSerializer

class KeywordsViewSet(viewsets.ModelViewSet):
    queryset = Keywords.objects.all()
    serializer_class = KeywordsSerializer
    
    def get_queryset(self):
        queryset = super().get_queryset()
        query_params = self.request.query_params.dict()

        query_filters = Q()

        # Handle string fields
        for field in ['alcohol', 'smoking', 'sport', 'zodiac_sign', 'marital_status']:
            value = query_params.get(field)
            if value and value != 'None':
                query_filters &= Q(**{f'{field}__iexact': value})

        # Handle integer fields
        height = query_params.get('height')
        if height is not None:
            query_filters &= Q(height=height)

        return queryset.filter(query_filters)

from .models import Ankete


10. ./api/course_work_app/tests.py

from django.test import TestCase

# Create your tests here.


11. ./api/course_work_app/middleware.py

from django.http import JsonResponse
from course_work.settings import authorization_key as auth_key_default

class AuthorizationMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Check if the authorization key is present in the request headers
        authorization_key = request.headers.get('Authorization')
        if not authorization_key or authorization_key != auth_key_default:
            return JsonResponse({'error': 'Authorization key missing'}, status=401)
        return self.get_response(request)

12. ./api/course_work_app/admin.py

from django.contrib import admin
from .models import Ankete, Keywords, ProfilePicture, PasswordRestoration, ClosedInfo, OpenInfo, Invitation, Ankete

admin.site.register(Ankete)
admin.site.register(Keywords)
admin.site.register(PasswordRestoration)
admin.site.register(ClosedInfo)
admin.site.register(OpenInfo)
admin.site.register(Invitation)
admin.site.register(ProfilePicture)


13. ./api/course_work_app/models.py

from django.db import models

class Ankete(models.Model):
    ankete_id = models.AutoField(primary_key=True)
    login = models.TextField(unique=True, default="")
    password = models.TextField(default="")

    def __str__(self) -> str:
        return self.ankete_id


class Invitation(models.Model):
    invitation_id = models.AutoField(primary_key=True)
    from_id = models.IntegerField()
    to_id = models.IntegerField()
    description = models.TextField()
    photo = models.TextField()

class OpenInfo(models.Model):
    ankete_id = models.IntegerField(primary_key=True)
    username = models.CharField(max_length=100)
    full_name = models.CharField(max_length=200)
    sex = models.CharField(max_length=10)
    age = models.IntegerField()
    city = models.CharField(max_length=100)
    description = models.TextField()

class ProfilePicture(models.Model):
    ankete_id = models.IntegerField(primary_key=True)
    profile_picture = models.TextField()

class ClosedInfo(models.Model):
    ankete_id = models.IntegerField(primary_key=True)
    number = models.CharField(max_length=20)

class PasswordRestoration(models.Model):
    ankete_id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=10)

class Keywords(models.Model):
    ankete_id = models.IntegerField(primary_key=True)
    hobby = models.CharField(max_length=100)
    alcohol = models.CharField(max_length=100)
    smoking = models.CharField(max_length=100)
    sport = models.CharField(max_length=100)
    zodiac_sign = models.CharField(max_length=20)
    height = models.IntegerField()
    why_here = models.TextField()
    marital_status = models.CharField(max_length=20)

14. ./client/client.py

import streamlit as st
from streamlit_navigation_bar import st_navbar
import os
import src.pages as pg



st.set_page_config(initial_sidebar_state="collapsed")
parent_dir = os.path.dirname(os.path.abspath(__file__))

options = {
    "show_menu": False,
    "show_sidebar": False,
}
pages = ["Home", "Your Profile", "Search Anketes", "Likes"]
page = st_navbar(pages, options=options)

functions = {
    "Home": pg.landing_page,
    "Your Profile": pg.profile_page,
    "Search Anketes": pg.search_page,
    "Likes": pg.settings_page,
}

go_to = functions.get(page)
if go_to: go_to()

15. ./client/config.py

import os
from dotenv import load_dotenv
load_dotenv()


class Config:
    api_acces_token = os.getenv("AUTH_API_KEY")
    api_base_url = "http://127.0.0.1:8000"  

class DefaultValues:
    username = "None"
    fullname = "None"
    sex = "Male"
    age = 25
    city = "None"
    description = "No description provided."
    phone_number = "+11234567890"
    hobby = "None"
    alcohol = "None"
    smoking = "None"
    sport = "None"
    zodiac_sign = "None"
    height = 175
    why_here = "None"
    marital_status = "None"

16. ./client/config.toml

# this is needed for local development with docker
[server]
# if you don't want to start the default browser:
headless = true
# you will need this for local development:
runOnSave = true
# you will need this if running docker on windows host:
fileWatcherType = "poll"

17. ./client/src/pages/settings_page.py


import streamlit as st
from src.api_client.api import APIClient
from src.data_manager.client_data_manager import ClientDataManager

def display_profile(profile_pic, user_data1, user_data2, invid, closed_info):
    with st.container():
        col1, col2 = st.columns(2)
        
        with col1:
            if profile_pic is not None:
                st.image(profile_pic, use_column_width=True)
        with col2:
            st.subheader("Profile Details")
            st.write(f"Username: {user_data2['username']}")
            st.write(f"Sex: {user_data2['sex']}")
            st.write(f"Age: {user_data2['age']}")
            st.write(f"City: {user_data2['city']}")
            st.write(f"Description: {user_data2['description']}")
            st.write(f"Hobby: {user_data1['hobby']}")
            st.write(f"Alcohol: {user_data1['alcohol']}")
            st.write(f"Smoking: {user_data1['smoking']}")
            st.write(f"Sport: {user_data1['sport']}")
            st.write(f"Zodiac Sign: {user_data1['zodiac_sign']}")
            st.write(f"Height: {user_data1['height']} cm")
            st.write(f"Why Here: {user_data1['why_here']}")
            st.write(f"Marital Status: {user_data1['marital_status']}")
            st.write(f"Phone number: {closed_info['number']}")

        clicked = st.button("Accept", key=f"but_ankete_id:{user_data1['ankete_id']}")
        if clicked:
            APIClient().delete_invitation(invid)

import numpy as np
    

def settings_page():

    manager = ClientDataManager()
    apiclient = APIClient()
    for writing in apiclient.search_invitation(manager.ankete_id):
        try:
            openinfo = apiclient.get_open_info(writing['from_id'])
            keywords = apiclient.get_keywords(writing['from_id'])
            profilepic = apiclient.get_profile_picture(writing['from_id'])
            profilepic = np.array(eval(profilepic))
            closed_info = apiclient.get_closed_info(writing['from_id'])
            
            display_profile(profilepic,  keywords, openinfo, writing['invitation_id'], closed_info)
            st.markdown(f"""Message to you: {writing['description']}""")
        except Exception as e:
            print(e)

18. ./client/src/pages/landing_page.py


import streamlit as st
import streamlit as st
from PIL import Image

from streamlit_cookies_controller import CookieController
from streamlit_authenticator import Authenticate
import streamlit_authenticator as stauth
from src.data_manager.client_data_manager import ClientDataManager


def landing_page():

    st.header("")

    with st.container():
        cols = st.columns((1, 1))
        with cols[0]:
            st.write(
                f"""

На нашому сайті знайомств ми робимо все можливе, щоб забезпечити вам найкращий досвід у пошуку ідеального партнера. Наша компанія пропонує унікальний підхід до знайомств, який базується на ретельному аналізі вашої особистості та вподобань.

Першим кроком на нашому сайті є заповнення докладної анкети, де ви маєте змогу розкрити свої інтереси, хобі, уподобання та очікування від майбутнього партнера. Ми віримо, що детальне знання один про одного допомагає знайти справжню гармонію.

Наша платформа прагне забезпечити надійність і безпеку усім користувачам. Ми використовуємо передові технології для захисту ваших особистих даних і забезпечення конфіденційності.

Крім того, ми пропонуємо широкий вибір функцій, які сприяють ефективному спілкуванню та взаєморозумінню між користувачами. Ви можете користуватися чатом, відеозв'язком, а також функцією відслідковування сумісності, щоб знайти того, хто відповідає вашим очікуванням найкраще.

Наш сайт знайомств прагне стати вашим надійним помічником у пошуку кохання і щастя. Долучайтеся до нашої спільноти сьогодні і відкрийте нові можливості для особистого щастя!

Наша бізнес модель полягає у тому, щоб утримувати вас тут максимально довго. Тож знайдете ви свого партнера хіба що у своїх мріях.
""",
                unsafe_allow_html=True
            )


19. ./client/src/pages/search_page.py

import streamlit as st
from src.data_manager.client_data_manager import ClientDataManager
from config import DefaultValues
from src.api_client.api import APIClient
import numpy as np
from PIL import Image


from streamlit_modal import Modal
from PIL import Image
import numpy as np
import random as rd


def handle_click(label, ankete_id=None):
    if "expanded" not in st.session_state:
        st.session_state.expanded = {}

    if ankete_id not in st.session_state.expanded:
        st.session_state.expanded[ankete_id] = False

  
             
                
                
def display_profile(profile_pic, user_data1, user_data2):

    
    with st.container():
        col1, col2 = st.columns(2)
        
        with col1:
            if profile_pic is not None:
                st.image(profile_pic, use_column_width=True)
        with col2:
            st.subheader("Profile Details")
            st.write(f"Username: {user_data2['username']}")
            st.write(f"Sex: {user_data2['sex']}")
            st.write(f"Age: {user_data2['age']}")
            st.write(f"City: {user_data2['city']}")
            st.write(f"Description: {user_data2['description']}")
            st.write(f"Hobby: {user_data1['hobby']}")
            st.write(f"Alcohol: {user_data1['alcohol']}")
            st.write(f"Smoking: {user_data1['smoking']}")
            st.write(f"Sport: {user_data1['sport']}")
            st.write(f"Zodiac Sign: {user_data1['zodiac_sign']}")
            st.write(f"Height: {user_data1['height']} cm")
            st.write(f"Why Here: {user_data1['why_here']}")
            st.write(f"Marital Status: {user_data1['marital_status']}")


        description = st.text_input("Invite description: ", key=f"des_ankete_id:{user_data1['ankete_id']}")
        clicked = st.button("send", key=f"but_ankete_id:{user_data1['ankete_id']}")
        if clicked:
            send_invitation(user_data1['ankete_id'], description, "1")  
    

def search_keywords(res):
    api_client = APIClient()
    for ankete_ in res:
        ankete_id = ankete_.get('ankete_id')
        profile_pic = api_client.get_profile_picture(ankete_id)
        ankete_open_info = api_client.get_open_info(ankete_id)
        if profile_pic and len(profile_pic) > 1:                
            try:
                image = np.array(eval(profile_pic))
            except:
                image= None
        data_to_display = (image, ankete_, ankete_open_info) 
        yield data_to_display, ankete_id


def send_invitation(ankete_id, description, photo):
    manager = ClientDataManager()
    api_client = APIClient()
    api_client.post_invitation(manager.ankete_id, ankete_id, description)
 
keywords_data = {}
def search_page():
    
        # send_invitation(st.session_state["to_send"])
    global keywords_data, clicked

    manager = ClientDataManager()
    api_client = APIClient()

    st.markdown("# Find your love quicker.")

    show_filters = st.expander("Show Filters")

    with show_filters:
        alcohol_options = ["Non-drinker", "Social drinker", "Heavy drinker", DefaultValues.alcohol]
        alcohol = st.selectbox("Relation to alcohol: ", alcohol_options, index=alcohol_options.index(keywords_data.get("alcohol", DefaultValues.alcohol)))

        smoking_options = ["Non-smoker", "Social smoker", "Heavy smoker", DefaultValues.smoking]
        smoking = st.selectbox("Relation to smoking:", smoking_options, index=smoking_options.index(keywords_data.get("smoking", DefaultValues.smoking)))

        sport_options = ["None", "Occasional", "Regular", DefaultValues.sport]
        sport = st.selectbox("Sport", sport_options, index=sport_options.index(keywords_data.get("sport", DefaultValues.sport)))

        zodiac_sign_options = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces", DefaultValues.zodiac_sign]
        zodiac_sign = st.selectbox("Your zodiac sign: ", zodiac_sign_options, index=zodiac_sign_options.index(keywords_data.get("zodiac_sign", DefaultValues.zodiac_sign)))

        height = st.number_input("Height", value=int(keywords_data.get("height", DefaultValues.height)), min_value=140, max_value=250, key="height_keywords")

        marital_status_options = ["Single", "Married", "Divorced", "Widowed", DefaultValues.marital_status]
        marital_status = st.selectbox("Marital Status", marital_status_options, index=marital_status_options.index(keywords_data.get("marital_status", DefaultValues.marital_status)))

    submit_button = st.button("Submit")

    if submit_button:
        keywords_data = {
            "alcohol": alcohol,
            "smoking": smoking,
            "sport": sport,
            "zodiac_sign": zodiac_sign,
            "height": height,
            "marital_status": marital_status
        }

    st.session_state["to_send"] = () 
    st.session_state["send"] = False

    #print(api_client.search_keywords(keywords_data))    
    for ankete, ankete_id in search_keywords(api_client.search_keywords(keywords_data)):    
        display_profile(*ankete)
        

20. ./client/src/pages/profile_page.py

import streamlit as st

from streamlit_cookies_controller import CookieController
from streamlit_authenticator import Authenticate
import streamlit_authenticator as stauth
from src.data_manager.client_data_manager import ClientDataManager
from streamlit.web.server.server import Server
from src.data_manager.client_data_manager import AnketeOpenData
from config import Config
from config import DefaultValues
import re
import numpy as np
import codecs
import sys

import base64
from PIL import Image
from io import BytesIO
import io

import chardet 
def image_to_base64_string(image_file):
    # Read the image file
    with open(image_file.name, "rb") as image_file:
        # Encode the image to base64
        encoded_string = base64.b64encode(image_file.read()).decode()
    return encoded_string

def to_bytes(s):
    if type(s) is bytes:
        return s
    elif type(s) is str or (sys.version_info[0] < 3 and type(s) is unicode):
        return codecs.encode(s, 'utf-8')
    else:
        raise TypeError("Expected bytes or string, but got %s." % type(s))

def profile_page():
    manager = ClientDataManager()
    if not manager.is_logged_in:
        login_field = st.text_input("Ваш логін")
        password_field = st.text_input("Ваш пароль")
        st.button("Вхід", on_click=lambda: manager.login(login_field, password_field))
        st.button("Реєстрація", on_click=lambda: manager.register(login_field, password_field))

    st.write("Ваш профіль")
    if manager.is_logged_in:
        open_data = manager.open_data or DefaultValues()
        closed_data = manager.get_closed_info() or {"number": DefaultValues.phone_number}
        keywords_data = manager.get_keywords() or {
            "hobby": DefaultValues.hobby,
            "alcohol": DefaultValues.alcohol,
            "smoking": DefaultValues.smoking,
            "sport": DefaultValues.sport,
            "zodiac_sign": DefaultValues.zodiac_sign,
            "height": DefaultValues.height,
            "why_here": DefaultValues.why_here,
            "marital_status": DefaultValues.marital_status,
        }

        #            submitted = st.form_submit_button("Submit")

        with st.form("profile_form"):    
            
            npstring = manager.get_profile_picture()
            if npstring:                
                image = np.array(eval(npstring))
                st.image(image, caption='Profile picture', use_column_width=True)

            uploaded_file = st.file_uploader("Choose a profile picture", type=["jpg", "jpeg", "png"])
            if uploaded_file is not None:
                image = Image.open(uploaded_file)
                img_array = np.array(image)
                
                st.image(image, caption='Profile picture', use_column_width=True)
                manager.update_profile_picture(str(img_array.tolist()))

            
            username = st.text_input("Ім'я або псевдонім", value=open_data.username)
            fullname = st.text_input("Повне Ім'я", value=open_data.fullname)
            sex_options = ["Male", "Female"]
            sex = st.radio("Стать", sex_options, index=sex_options.index(open_data.sex))
            age = st.number_input("Багато років?", value=int(open_data.age), min_value=16, max_value=120, key="age_open_info")
            city = st.text_input("Місто проживання", value=open_data.city)
            description = st.text_area("Опис анкети", value=open_data.description)
            phone_number = st.text_input("Номер телефону (видно тільки тим, кому ви надіслали лайк.)", value=closed_data.get("number", DefaultValues.phone_number), help="Enter a valid phone number in the format +123456789")

            st.markdown("---")
            st.subheader("Трошки деталей про вас")
            hobby = st.text_input("Ваші хобі: ", value=keywords_data.get("hobby", DefaultValues.hobby))
            alcohol_options = ["Non-drinker", "Social drinker", "Heavy drinker", DefaultValues.alcohol]
            alcohol = st.selectbox("Відношення до алкоголю: ", alcohol_options, index=alcohol_options.index(keywords_data.get("alcohol", DefaultValues.alcohol)))

            smoking_options = ["Non-smoker", "Social smoker", "Heavy smoker", DefaultValues.smoking]
            smoking = st.selectbox("Relation to smoking:", smoking_options, index=smoking_options.index(keywords_data.get("smoking", DefaultValues.smoking)))
            sport_options = ["None", "Occasional", "Regular", DefaultValues.sport]
            sport = st.selectbox("Sport", sport_options, index=sport_options.index(keywords_data.get("sport", DefaultValues.sport)))
            zodiac_sign_options = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces", DefaultValues.zodiac_sign]
            zodiac_sign = st.selectbox("Знак зодіаку: ", zodiac_sign_options, index=zodiac_sign_options.index(keywords_data.get("zodiac_sign", DefaultValues.zodiac_sign)))
            height = st.number_input("Зрістt", value=int(keywords_data.get("height", DefaultValues.height)), min_value=140, max_value=250, key="height_keywords")
            why_here = st.text_area("Чому ви тут?", value=keywords_data.get("why_here", DefaultValues.why_here))
            marital_status_options = ["Single", "Married", "Divorced", "Widowed", DefaultValues.marital_status]
            marital_status = st.selectbox("Marital Status", marital_status_options, index=marital_status_options.index(keywords_data.get("marital_status", DefaultValues.marital_status)))

            submitted = st.form_submit_button("Submit")

            if submitted:
                if not re.match(r'^\+\d{10,15}$', phone_number):
                    st.error("Please enter a valid phone number in the format +123456789")
                    st.stop()

                open_data.username = username
                open_data.fullname = fullname
                open_data.sex = sex
                open_data.age = age
                open_data.city = city
                open_data.description = description

                try:
                    manager.update_open_data(open_data)
                except Exception as e:
                    print(e)
                manager.update_closed_info(phone_number)
                manager.update_keywords(hobby, alcohol, smoking, sport, zodiac_sign, height, why_here, marital_status)
                st.success("Профіль успішно оновлено!")

        st.markdown("---")

        st.button("Вихід", on_click=lambda: manager.logout())

21. ./client/src/api_client/api.py

import requests
from typing import Optional
from config import Config

class APIClient:
    def __init__(self):
        self.base_url = Config.api_base_url
        self.access_token = Config.api_acces_token
        self.session = requests.Session()
        self.session.headers.update({"Authorization": f"Bearer {self.access_token}"})

    def authenticate(self, login, password) -> Optional[int]:
        endpoint = f"{self.base_url}/login/"
        data = {"login": login, "password": password}
        response = self.session.post(endpoint, json=data)
        res_data = response.json()
        success = res_data.get("success", False)
        if success:
            return res_data['ankete_id']
        else:
            return None

    # Ankete
    def get_ankete(self, ankete_id):
        endpoint = f"{self.base_url}/ankete/{ankete_id}/"
        response = self.session.get(endpoint)
        if response.status_code == 200:
            return response.json()
        return None

    def post_ankete(self, login, password):
        endpoint = f"{self.base_url}/ankete/"
        data = {"login": login, "password": password}
        response = self.session.post(endpoint, json=data)
        res_data = response.json()
        ankete_id = res_data.get("ankete_id")
        if ankete_id:
            return ankete_id
        return None

    # InvitationToAnkete
    def get_invitation_to_ankete(self, invitation_to_ankete_id):
        endpoint = f"{self.base_url}/invitation-to-ankete/{invitation_to_ankete_id}/"
        response = self.session.get(endpoint)
        if response.status_code == 200:
            return response.json()
        return None

    def post_invitation_to_ankete(self, ankete_id):
        endpoint = f"{self.base_url}/invitation/"
        data = {"ankete_id": ankete_id}
        response = self.session.post(endpoint, json=data)
        res_data = response.json()
        invitation_id = res_data.get("invitation_id")
        if invitation_id:
            return invitation_id
        return None

    def delete_invitation(self, invitiation_id):
        endpoint = f"{self.base_url}/invitation/{invitiation_id}"
        response = self.session.post(endpoint)
        res_data = response.json()
        return res_data
    
    def search_invitation(self, to):
        endpoint = f"{self.base_url}/invitation/"
        params = {"to_id": to}
        response = self.session.get(endpoint, params=params)

        return response.json()


    # Invitation
    def get_invitation(self, invitation_id):
        endpoint = f"{self.base_url}/invitation/{invitation_id}/"
        response = self.session.get(endpoint)
        if response.status_code == 200:
            return response.json()
        return None

    def post_invitation(self, from_id, to_id, description="description", photo="1"):
        endpoint = f"{self.base_url}/invitation/"
        data = {
            "from_id": from_id,
            "to_id": to_id,
            "description": description,
            "photo": photo,
        }
        response = self.session.post(endpoint, json=data)
        
        print(response.content)
        res_data = response.json()
        invitation_id = res_data.get("invitation_id")
        if invitation_id:
            return invitation_id
        return None

    # OpenInfo
    def get_open_info(self, ankete_id):
        endpoint = f"{self.base_url}/open-info/{ankete_id}/"
        response = self.session.get(endpoint)
        if response.status_code == 200:
            return response.json()
        return None

    def post_open_info(self, ankete_id, username, full_name, sex, age, city, description, profile_picture=None):
        endpoint = f"{self.base_url}/open-info/"
        data = {
            "ankete_id":ankete_id,
            "username": username,
            "full_name": full_name,
            "sex": sex,
            "age": age,
            "city": city,
            "description": description,
        }
        response = self.session.post(endpoint, json=data)
        return response.status_code == 200

    # ClosedInfo
    def get_closed_info(self, ankete_id):
        endpoint = f"{self.base_url}/closed-info/{ankete_id}/"
        response = self.session.get(endpoint)
        if response.status_code == 200:
            return response.json()
        return None

    def post_closed_info(self, ankete_id, phone_number):
        endpoint = f"{self.base_url}/closed-info/"
        data = {"number": phone_number, "ankete_id":ankete_id}
        response = self.session.post(endpoint, json=data)
        return response.status_code == 200

    # PasswordRestoration
    def get_password_restoration(self, ankete_id):
        endpoint = f"{self.base_url}/password-restoration/{ankete_id}/"
        response = self.session.get(endpoint)
        if response.status_code == 200:
            return response.json()
        return None

    def post_password_restoration(self, ankete_id, code):
        endpoint = f"{self.base_url}/password-restoration/"
        data = {"code": code}
        response = self.session.post(endpoint, json=data)
        return response.status_code == 200

    # Keywords
    def search_keywords(self, params):
        endpoint = f"{self.base_url}/keywords/"
        response = self.session.get(endpoint, params=params)

        if response.status_code == 200:
            return response.json()
        return None

    def get_keywords(self, ankete_id):
        endpoint = f"{self.base_url}/keywords/{ankete_id}/"
        response = self.session.get(endpoint)
        
        if response.status_code == 200:
            return response.json()
        return None

    def post_keywords(self, ankete_id, hobby, alcohol, smoking, sport, zodiac_sign, height, age, why_here, marital_status):
        endpoint = f"{self.base_url}/keywords/"
        data = {
            "ankete_id":ankete_id,
            "hobby": hobby,
            "alcohol": alcohol,
            "smoking": smoking,
            "sport": sport,
            "zodiac_sign": zodiac_sign,
            "height": height,
            "age": age,
            "why_here": why_here,
            "marital_status": marital_status,
        }
        response = self.session.post(endpoint, json=data)

        return response.status_code == 200

    # OpenInfo
    def put_open_info(self, ankete_id, username, full_name, sex, age, city, description):
        endpoint = f"{self.base_url}/open-info/{ankete_id}/"
        data = {
            "ankete_id":ankete_id,
            "username": username,
            "full_name": full_name,
            "sex": sex,
            "age": age,
            "city": city,
            "description": description,
        }
        response = self.session.put(endpoint, json=data)
        return response.status_code == 200

    def post_profile_picture(self, ankete_id):
        endpoint = f"{self.base_url}/profile_pictures/"
        data = {"ankete_id":ankete_id, "profile_picture":"_"}
        response = self.session.post(endpoint, json=data)
        return response.status_code == 200
    
    def put_profiel_picture(self, ankete_id, image_str):
        endpoint = f"{self.base_url}/profile_pictures/{ankete_id}/"
        data = {"ankete_id":ankete_id, "profile_picture": image_str}
        response = self.session.put(endpoint, json=data)
        return response.status_code == 200

    def get_profile_picture(self, ankete_id):
        endpoint = f"{self.base_url}/profile_pictures/{ankete_id}/"
        data = {"ankete_id":ankete_id}
        response = self.session.get(endpoint, json=data)
        res = response.json().get("profile_picture", None) # 
        if res and len(res) > 1:
            return res
    
    # ClosedInfo
    def put_closed_info(self, ankete_id, phone_number):
        endpoint = f"{self.base_url}/closed-info/{ankete_id}/"
        data = {"number": phone_number, "ankete_id":ankete_id}
        response = self.session.put(endpoint, json=data)
        return response.status_code == 200

    # PasswordRestoration
    def put_password_restoration(self, ankete_id, code):
        endpoint = f"{self.base_url}/password-restoration/{ankete_id}/"
        data = {"code": code, "ankete_id":ankete_id}
        response = self.session.put(endpoint, json=data)
        return response.status_code == 200



    # Keywords
    def put_keywords(self, ankete_id, hobby, alcohol, smoking, sport, zodiac_sign, height,  why_here, marital_status):
        endpoint = f"{self.base_url}/keywords/{ankete_id}/"
        data = {
            "ankete_id":ankete_id,
            "hobby": hobby,
            "alcohol": alcohol,
            "smoking": smoking,
            "sport": sport,
            "zodiac_sign": zodiac_sign,
            "height": height,
            "why_here": why_here,
            "marital_status": marital_status,
        }
        response = self.session.put(endpoint, json=data)
        return response.status_code == 200

22. ./client/src/data_manager/client_data_manager.py

import streamlit as st
from config import DefaultValues
from streamlit_cookies_controller import CookieController
from src.api_client.api import APIClient
from datetime import datetime, timedelta
import base64
from io import BytesIO
from PIL import Image

now = datetime.now()
one_month_later = now + timedelta(days=30)

class AnketeOpenData:
    def __init__(self, filled=None, username="", fullname="", sex="", age="", city="", description="", profile_picture=None):
        self.filled = filled
        self.username = username
        self.fullname = fullname
        self.sex = sex
        self.age = age
        self.city = city
        self.description = description
        self.profile_picture = profile_picture

class ClientDataManager:
    def __init__(self):
        self.controller = CookieController()
        self.api_client = APIClient()
    
    @property
    def is_logged_in(self):
        return self.get_data('is_logged_in')

    @property
    def ankete_id(self):
        return self.get_data("ankete_id")

    @property
    def open_data(self):
        res = self.api_client.get_open_info(self.ankete_id)
        if res is not None:
            return AnketeOpenData(
                filled=True,
                username=res['username'],
                fullname=res['full_name'],
                sex=res['sex'],
                age=res['age'],
                city=res['city'],
                description=res['description'],
            )
        return AnketeOpenData()

    def update_open_data(self, ankete_open_data: AnketeOpenData):

        return self.api_client.put_open_info(
            self.ankete_id,
            ankete_open_data.username,
            ankete_open_data.fullname,
            ankete_open_data.sex,
            ankete_open_data.age,
            ankete_open_data.city,
            ankete_open_data.description,
        )

    def get_closed_info(self):
        return self.api_client.get_closed_info(self.ankete_id)

    def update_closed_info(self, phone_number):
        return self.api_client.put_closed_info(self.ankete_id, phone_number)

    def get_password_restoration(self):
        return self.api_client.get_password_restoration(self.ankete_id)

    def update_password_restoration(self, code):
        return self.api_client.put_password_restoration(self.ankete_id, code)

    def get_keywords(self):
        return self.api_client.get_keywords(self.ankete_id)

    def update_keywords(self, hobby, alcohol, smoking, sport, zodiac_sign, height, why_here, marital_status):
        return self.api_client.put_keywords(
            self.ankete_id,
            hobby,
            alcohol,
            smoking,
            sport,
            zodiac_sign,
            height,
            why_here,
            marital_status
        )


    def update_profile_picture(self, image_str):
        return self.api_client.put_profiel_picture(self.ankete_id, image_str)

    def get_profile_picture(self):
        return self.api_client.get_profile_picture(self.ankete_id)
            
    def get_ankete(self):
        return self.api_client.get_ankete(self.ankete_id)

    def get_invitation_to_ankete(self, invitation_to_ankete_id):
        return self.api_client.get_invitation_to_ankete(invitation_to_ankete_id)

    def post_invitation_to_ankete(self):
        return self.api_client.post_invitation_to_ankete(self.ankete_id)

    def get_invitation(self, invitation_id):
        return self.api_client.get_invitation(invitation_id)

    def post_invitation(self, from_id, to_id, description, photo=None, video=None):
        return self.api_client.post_invitation(from_id, to_id, description, photo, video)

    def logout(self):
        self.set_data("is_logged_in", False)
        self.set_data("ankete_id", -1)

    def login(self, login_str, password_str):
        ankete_id = self.api_client.authenticate(login_str, password_str)

        if ankete_id is not None:
            self.set_data("is_logged_in", True)
            self.set_data("ankete_id", ankete_id)
            return True
        return False


    def register(self, login_str, password_str):
        ankete_id = self.api_client.post_ankete(login_str, password_str)
        self.api_client.post_profile_picture(ankete_id)
        self.api_client.post_open_info(
            ankete_id,
            DefaultValues.username,
            DefaultValues.fullname,
            DefaultValues.sex,
            DefaultValues.age,
            DefaultValues.city,
            DefaultValues.description,
            ""
        )
        self.api_client.post_keywords(
            ankete_id,
            DefaultValues.hobby,
            DefaultValues.alcohol,
            DefaultValues.smoking,
            DefaultValues.sport,
            DefaultValues.zodiac_sign,
            DefaultValues.height,
            DefaultValues.age,
            DefaultValues.why_here,
            DefaultValues.marital_status
        )
        self.api_client.post_closed_info(ankete_id, 0)
        if ankete_id:
            self.set_data("is_logged_in", True)
            self.set_data("ankete_id", ankete_id)
            return True
        return False

    def set_data(self, key, value):
        st.session_state[key] = value
        self.controller.set(key, value, expires=one_month_later)

    def get_data(self, key):
        session_state = st.session_state.get(key)
        try:
            cookies = self.controller.get(key)
        except:
            cookies = None

        if not cookies:
            return session_state
        else:
            return cookies

    def del_data(self, key):
        self.controller.remove(key)
